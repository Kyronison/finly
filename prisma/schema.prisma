generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CategoryType {
  INCOME
  EXPENSE
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  passwordHash  String
  createdAt     DateTime   @default(now())
  categories    Category[]
  expenses      Expense[]
}

model Category {
  id         String        @id @default(cuid())
  name       String
  type       CategoryType  @default(EXPENSE)
  budget     Int?
  color      String?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime      @default(now())
  expenses   Expense[]
}

model Expense {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  amount      Float
  description String?
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
}

model PortfolioConnection {
  id            String                @id @default(cuid())
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  token         String
  accountId     String?
  brokerAccountType String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  lastSyncedAt  DateTime?
  snapshots     PortfolioSnapshot[]
  positions     PortfolioPosition[]
  operations    PortfolioOperation[]
  dividends     PortfolioDividend[]

  @@unique([userId])
}


model PortfolioSnapshot {
  id            String               @id @default(cuid())
  connection    PortfolioConnection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId  String
  capturedAt    DateTime
  totalAmount   Float
  expectedYield Float?
  currency      String
  createdAt     DateTime             @default(now())

  @@index([connectionId, capturedAt])
}

model PortfolioPosition {
  id                       String               @id @default(cuid())
  connection               PortfolioConnection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId             String
  figi                     String
  ticker                   String?
  name                     String?
  instrumentType           String?
  balance                  Float
  lot                      Float?
  currentPrice             Float?
  averagePositionPrice     Float?
  expectedYield            Float?
  expectedYieldPercent     Float?
  currency                 String?
  updatedAt                DateTime             @default(now())

  @@index([connectionId, figi])
}

model PortfolioOperation {
  id             String               @id @default(cuid())
  connection     PortfolioConnection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId   String
  operationId    String
  figi           String?
  ticker         String?
  instrumentType String?
  operationType  String
  payment        Float?
  price          Float?
  quantity       Float?
  currency       String?
  date           DateTime
  description    String?
  commission     Float?
  createdAt      DateTime             @default(now())

  @@unique([connectionId, operationId])
  @@index([connectionId, date])
}

model PortfolioDividend {
  id           String               @id @default(cuid())
  connection   PortfolioConnection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId String
  figi         String?
  ticker       String?
  amount       Float
  currency     String?
  paymentDate  DateTime
  recordDate   DateTime?
  createdAt    DateTime             @default(now())

  @@index([connectionId, paymentDate])
}
